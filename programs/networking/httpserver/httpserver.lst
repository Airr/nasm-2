     1                                  ; httpserver.asm
     2                                  ;
     3                                  ; A very very basic httpserver demonstration.
     4                                  ; For this I got my inspiration from the 32 bit application httpd from asmutils-0.18.
     5                                  ; http://asm.sourceforge.net/asmutils.html
     6                                  ;
     7                                  ; update: 4/11/2014 : bug in creating the socket,  mov rdi, PF_INET and mov rsi, SOCK_STREAM
     8                                  ;                     added %define for constants AF_INET, SOCK_STREAM, PF_INET, IPPROTO_IP, INADDR_ANY
     9                                  ; to-do: - a lot!!
    10                                  ;        - configuration file
    11                                  ;        - execute binary files (cgi-bin)
    12                                  ;        - environment variables
    13                                  ;        - special tag support php, aspx like but for Nasm
    14                                  ;        - .... suggestions?
    15                                  ;
    16                                  ; Application: This program running as local webserver is usefull to watch requests send to the webserver.
    17                                  ;
    18                                  ; Read also the info.txt file.
    19                                   
    20                                  BITS 64
   500                                  [list -]
   501                                  
   502                                  
   503                                  
   504                                  section .bss
   505                                   
   506 00000000 <res 00000008>          sockfd:                 resq 1
   507 00000008 <res 00000008>          sock_addr:              resq 1
   508                                   
   509                                  section .data
   510                                   
   511                                  ; message to keep user confortable that the server is actually running
   512 00000000 736572766572206973-     server_listening:         db "server is listening"
   513 00000009 206C697374656E696E-
   514 00000012 67                 
   515 00000013 0A                      lf                        db 10
   516                                  server_listening.length:  equ $-server_listening
   517                                   
   518 00000014 7374617274696E672E-     trying:                   db  "starting..."
   519 0000001D 2E2E               
   520                                  trying.length:            equ $-trying
   521                                   
   522                                  ; the buffer to read the client request, in this application we only read and show the contents of such a request.
   523                                  ; Sometimes there is interesting info in it.  In more advanced webserver applications we need to parse the required
   524                                  ; page, serve the page and eventually perform cgi scripts.
   525 0000001F 00<rept>                buffer:                   times 1024 db 0
   526                                  .length: equ $-buffer
   527                                   
   528                                  ; A full webserver reply 200.  We can send other pages too. A full list of status codes can be found at
   529                                  ; http://en.wikipedia.org/wiki/List_of_HTTP_status_codes
   530                                  
   531                                  reply:               ;   db 'HTTP/1.1 301 Moved Permanently', 10
   532                                                       ;   db 'Location: http://www.agguro.be/index.php', 10, 10   <-- example of redirect -->
   533                                                       
   534 0000041F 485454502F312E3120-                             db 'HTTP/1.1 200 OK',10
   535 00000428 323030204F4B0A     
   536 0000042F 5365727665723A2064-                             db 'Server: demo web server',10               ; change 'demo web server' to your own name
   537 00000438 656D6F207765622073-
   538 00000441 65727665720A       
   539 00000447 5365742D436F6F6B69-                             db 'Set-Cookie:UserID=XYZ', 10                ; change the cookies and un remark them if you like 
   540 00000450 653A5573657249443D-
   541 00000459 58595A0A           
   542 0000045D 5365742D436F6F6B69-                             db 'Set-Cookie:Password=XYZ123', 10
   543 00000466 653A50617373776F72-
   544 0000046F 643D58595A3132330A 
   545 00000478 5365742D436F6F6B69-                             db 'Set-Cookie:Domain=www.agguro.be', 10
   546 00000481 653A446F6D61696E3D-
   547 0000048A 7777772E6167677572-
   548 00000493 6F2E62650A         
   549 00000498 5365742D436F6F6B69-                             db 'Set-Cookie:Path=/', 10
   550 000004A1 653A506174683D2F0A 
   551 000004AA 436F6E74656E742D6C-                             db 'Content-length: 296',10                   ; the length of the webpage we will send back, calculated last-first+1
   552 000004B3 656E6774683A203239-
   553 000004BC 360A               
   554 000004BE 436F6E74656E742D54-                             db 'Content-Type: text/html',10,10            ; the content type
   555 000004C7 7970653A2074657874-
   556 000004D0 2F68746D6C0A0A     
   557 000004D7 3C21444F4354595045-                             db '<!DOCTYPE html><html>'
   558 000004E0 2068746D6C3E3C6874-
   559 000004E9 6D6C3E             
   560 000004EC 3C686561643E3C7469-                             db '<head><title>demo webserver</title></head>'
   561 000004F5 746C653E64656D6F20-
   562 000004FE 776562736572766572-
   563 00000507 3C2F7469746C653E3C-
   564 00000510 2F686561643E       
   565 00000516 3C626F64793E3C6831-                             db '<body><h1>Demo webserver</h1>'
   566 0000051F 3E44656D6F20776562-
   567 00000528 7365727665723C2F68-
   568 00000531 313E               
   569 00000533 3C666F726D206D6574-                             db '<form method="post" action="http://localhost:4444/?t=1">'
   570 0000053C 686F643D22706F7374-
   571 00000545 2220616374696F6E3D-
   572 0000054E 22687474703A2F2F6C-
   573 00000557 6F63616C686F73743A-
   574 00000560 343434342F3F743D31-
   575 00000569 223E               
   576 0000056B 3C696E707574207479-                             db '<input type="text" name="inputfield" value="type something" />'
   577 00000574 70653D227465787422-
   578 0000057D 206E616D653D22696E-
   579 00000586 7075746669656C6422-
   580 0000058F 2076616C75653D2274-
   581 00000598 79706520736F6D6574-
   582 000005A1 68696E6722202F3E   
   583 000005A9 3C627574746F6E2074-                             db '<button type="submit" name="submit" value="name">Send data</button>'
   584 000005B2 7970653D227375626D-
   585 000005BB 697422206E616D653D-
   586 000005C4 227375626D69742220-
   587 000005CD 76616C75653D226E61-
   588 000005D6 6D65223E53656E6420-
   589 000005DF 646174613C2F627574-
   590 000005E8 746F6E3E           
   591 000005EC 3C2F666F726D3E3C2F-                             db '</form></body></html>'
   592 000005F5 626F64793E3C2F6874-
   593 000005FE 6D6C3E             
   594                                  reply.length:           equ $-reply
   595                                   
   596 00000601 736F636B6574657272-     socketerror:            db "socketerror", 10
   597 0000060A 6F720A             
   598                                  .length:                equ $-socketerror
   599 0000060D 6C697374656E657272-     listenerror:            db "listenerror", 10
   600 00000616 6F720A             
   601                                  .length:                equ $-listenerror
   602                                  
   603 00000619 115C                    port:                   db 17,92           ; port 4444 
   604                                  
   605                                  section .text
   606                                   
   607                                  global _start
   608                                   
   609                                  _start:
   610                                   
   611                                  ; create a socket
   612 00000000 B829000000                      mov     rax, SYS_SOCKET          ; call socket(SOCK_STREAM, AF_NET, 0);
   613 00000005 BF02000000                      mov     rdi, PF_INET             ; PF_INET = 2
   614 0000000A BE01000000                      mov     rsi, SOCK_STREAM         ; SOCK_STREAM = 1
   615 0000000F BA00000000                      mov     rdx, IPPROTO_IP          ; IPPROTO_IP = 0
   616 00000014 0F05                            syscall
   617 00000016 4883F800                        cmp     rax, 0
   618 0000001A 0F84A4010000                    jz      .socketerror
   619 00000020 48890425[00000000]              mov     QWORD[sockfd], rax
   620                                   
   621                                  ; fill in sock_addr structure (on stack)
   622 00000028 4D31C0                          xor     r8, r8                   ; clear the value of r8
   623 0000002B 41B800000000                    mov     r8, INADDR_ANY           ; (INADDR_ANY = 0) - if changed to 100007Fx(IP address : 127.0.0.1) we can only connect locally
   624 00000031 4150                            push    r8                       ; push r8 to the stack
   625 00000033 66FF3425[19060000]              push    WORD [port]              ; push our port number to the stack
   626 0000003B 666A02                          push    WORD AF_INET             ; push protocol argument to the stack (AF_INET = 2)
   627 0000003E 48892425[08000000]              mov     QWORD[sock_addr], rsp    ; Save the sock_addr_in
   628                                   
   629                                  ; bind the socket to the address, keep trying until we succeed.
   630                                  ; if the address is still in use, bind will fail, we can avoid this with the setsockopt syscall, but we use INADDR_ANY so anyone can
   631                                  ; bind to the server's socket.  Therefor I don't use setsockopt.
   632                                  ; You can read more here: http://hea-www.harvard.edu/~fine/Tech/addrinuse.html
   633                                  ; Instead I keep trying until the server allows us to bind again, in the mainwhile we wait ....
   634                                   
   635 00000046 48BE-                           mov     rsi, trying
   636 00000048 [1400000000000000] 
   637 00000050 BA0B000000                      mov     rdx, trying.length
   638                                  
   639 00000055 BF01000000                      mov     rdi, STDOUT
   640 0000005A B801000000                      mov     rax, SYS_WRITE
   641 0000005F 0F05                            syscall
   642                                  .tryagain: 
   643 00000061 B831000000                      mov     rax, SYS_BIND             ; bind(sockfd, sockaddr, addrleng);
   644 00000066 488B3C25[00000000]              mov     rdi, qword[sockfd]        ; sockfd from socket syscall
   645 0000006E 488B3425[08000000]              mov     rsi, qword[sock_addr]     ; sockaddr 
   646 00000076 BA10000000                      mov     rdx, 16                   ; addrleng the ip address length
   647 0000007B 0F05                            syscall
   648 0000007D 4821C0                          and     rax, rax
   649 00000080 75DF                            jnz     .tryagain
   650                                   
   651                                  .bindsucces:
   652                                          ; first end the previous line with LF
   653 00000082 48BE-                           mov     rsi, lf
   654 00000084 [1300000000000000] 
   655 0000008C BA01000000                      mov     rdx, 1
   656 00000091 BF01000000                      mov     rdi, STDOUT
   657 00000096 B801000000                      mov     rax, SYS_WRITE
   658 0000009B 0F05                            syscall
   659                                   
   660 0000009D B832000000                      mov     rax, SYS_LISTEN           ; int listen(sockfd, backlog);
   661 000000A2 488B3C25[00000000]              mov     rdi, qword[sockfd]        ; sockfd
   662 000000AA 4831F6                          xor     rsi, rsi                  ; backlog
   663 000000AD 0F05                            syscall
   664 000000AF 4809C0                          or      rax, rax
   665 000000B2 0F85FB000000                    jnz     .listenerror
   666                                   
   667                                          ; inform user that the server is listening
   668 000000B8 48BE-                           mov     rsi, server_listening
   669 000000BA [0000000000000000] 
   670 000000C2 BA14000000                      mov     rdx, server_listening.length
   671 000000C7 BF01000000                      mov     rdi, STDOUT
   672 000000CC B801000000                      mov     rax, SYS_WRITE
   673 000000D1 0F05                            syscall
   674                                   
   675                                  .acceptloop:
   676 000000D3 B82B000000                      mov     rax, SYS_ACCEPT           ; int accept(sockfd, sockaddr, socklen);
   677 000000D8 488B3C25[00000000]              mov     rdi, qword[sockfd]        ; sockfd
   678 000000E0 4831F6                          xor     rsi, rsi                  ; sockaddr
   679 000000E3 4831D2                          xor     rdx, rdx                  ; socklen
   680 000000E6 0F05                            syscall 
   681 000000E8 4883F800                        cmp     rax, 0
   682 000000EC 78E5                            js      .acceptloop
   683 000000EE 4989C4                          mov     r12, rax                  ; use the accept socket from here
   684                                   
   685 000000F1 48C7C7FFFFFFFF                  mov     rdi, -1                   ; following the original source we need two
   686 000000F8 BE00000000                      mov     rsi, 0                    ; WAIT4 to prevent zombies. I tried without it,
   687 000000FD BA01000000                      mov     rdx, WNOHANG              ; with zombies as a result
   688 00000102 B900000000                      mov     rcx, 0
   689 00000107 B83D000000                      mov     rax, SYS_WAIT4
   690 0000010C 0F05                            syscall
   691                                   
   692 0000010E 48C7C7FFFFFFFF                  mov     rdi, -1
   693 00000115 BE00000000                      mov     rsi, 0
   694 0000011A BA01000000                      mov     rdx, WNOHANG
   695 0000011F B900000000                      mov     rcx, 0
   696 00000124 B83D000000                      mov     rax, SYS_WAIT4
   697 00000129 0F05                            syscall
   698                                   
   699                                          ; we have accepted a connection, let a child do the work while the parent wait to accept other connections
   700 0000012B B839000000                      mov     rax, SYS_FORK
   701 00000130 0F05                            syscall
   702 00000132 4821C0                          and     rax, rax
   703 00000135 740C                            jz      .serveclient              ; Child continues here
   704                                   
   705 00000137 4C89E7                          mov     rdi, r12                  ; parent closes the connection
   706 0000013A B803000000                      mov     rax, SYS_CLOSE
   707 0000013F 0F05                            syscall
   708 00000141 EB90                            jmp     .acceptloop               ; and go back to accept new incoming connections
   709                                   
   710                                  .serveclient:
   711                                          ; the client has send a request, we read this and put it in a buffer
   712 00000143 B800000000                      mov     rax, SYS_READ
   713 00000148 4C89E7                          mov     rdi, r12
   714 0000014B 48BE-                           mov     rsi, buffer
   715 0000014D [1F00000000000000] 
   716 00000155 BA00040000                      mov     rdx, buffer.length
   717 0000015A 0F05                            syscall
   718                                   
   719                                          ; write received request to the terminal (later this can be a log file)
   720                                          ; the actual read bytes are stored in RAX
   721 0000015C 4889C2                          mov     rdx, rax
   722 0000015F 48BE-                           mov     rsi, buffer
   723 00000161 [1F00000000000000] 
   724 00000169 BF01000000                      mov     rdi, STDOUT
   725 0000016E B801000000                      mov     rax, SYS_WRITE
   726 00000173 0F05                            syscall
   727                                   
   728                                          ; additional end of line
   729 00000175 48BE-                           mov     rsi, lf
   730 00000177 [1300000000000000] 
   731 0000017F BA01000000                      mov     rdx, 1
   732 00000184 BF01000000                      mov     rdi, STDOUT
   733 00000189 B801000000                      mov     rax, SYS_WRITE
   734 0000018E 0F05                            syscall
   735                                   
   736                                          ; here we should parse the request from client that's put in STDIN
   737                                          ; now we just reply with the so called "reply"
   738                                          ; decision making stuff comes here, exp: CGI scripts, request for additional pages etc...
   739                                          ; see the original source
   740                                   
   741                                          ; send the reply to the client
   742 00000190 4C89E7                          mov     rdi, r12
   743 00000193 48BE-                           mov     rsi, reply
   744 00000195 [1F04000000000000] 
   745 0000019D BAE2010000                      mov     rdx, reply.length
   746 000001A2 B801000000                      mov     rax, SYS_WRITE
   747 000001A7 0F05                            syscall
   748                                   
   749                                          ; we are done, exit Child process
   750 000001A9 4831FF                          xor     rdi, rdi
   751 000001AC B83C000000                      mov     rax, SYS_EXIT
   752 000001B1 0F05                            syscall
   753                                   
   754                                  ; the errors
   755                                  .listenerror:
   756 000001B3 48BE-                           mov     rsi, listenerror
   757 000001B5 [0D06000000000000] 
   758 000001BD BA0C000000                      mov     rdx, listenerror.length
   759 000001C2 EB11                            jmp     .print
   760                                   
   761                                  .socketerror:
   762 000001C4 48BE-                           mov     rsi, socketerror
   763 000001C6 [0106000000000000] 
   764 000001CE BA0C000000                      mov     rdx, socketerror.length
   765 000001D3 EB00                            jmp     .print
   766                                   
   767                                  .print:
   768 000001D5 BF01000000                      mov     rdi, STDOUT
   769 000001DA B801000000                      mov     rax, SYS_WRITE
   770 000001DF 0F05                            syscall
   771                                  .exit:  
   772 000001E1 4831FF                          xor     rdi, rdi
   773 000001E4 B83C000000                      mov     rax, SYS_EXIT
   774 000001E9 0F05                            syscall
