     1                                  ; IP2Hex
     2                                  ;
     3                                  ; convert IP address to hexadecimal
     4                                  ; the output on the terminal is only to have control over the output. No great output is provided.
     5                                  
     6                                  BITS 64
     7                                  
   324                                  [list -]
   325                                  
   326                                  section .bss
   327 00000000 <res 00000001>               buffer:        resb      1
   328                                  
   329                                  section .data
   330                                        
   331 00000000 75736167653A206970-          usageMsg:      db        "usage: ip2hex ipaddress", 10
   332 00000009 326865782069706164-
   333 00000012 64726573730A       
   334 00000018 776865726520697061-                         db        "where ipaddress is xxx.xxx.xxx.xxx", 10
   335 00000021 646472657373206973-
   336 0000002A 207878782E7878782E-
   337 00000033 7878782E7878780A   
   338                                       .length:       equ       $-usageMsg
   339 0000003B 0A                           crlf:          db        10
   340                                        
   341                                  section .text
   342                                       global    _start
   343                                  
   344                                       global    htond                    ; host to network byte order
   345                                       global    ntohd                    ; network to host byte order
   346                                       global    IP2Hex                   ; IP to hexdecimal
   347                                  
   348                                  _start:
   349                                  
   350 00000000 58                           pop       rax                      ; get numer of argument
   351 00000001 4883F802                     cmp       rax, 2
   352 00000005 7530                         jne       usage
   353 00000007 58                           pop       rax                      ; get the command
   354 00000008 5E                           pop       rsi                      ; get the IP address
   355 00000009 4889F7                       mov       rdi, rsi                 ; save IP address
   356 0000000C E84D000000                   call      IP2Hex                   ; rax = IP address or errorcode
   357 00000011 4821C0                       and       rax, rax
   358 00000014 7C21                         jl        usage
   359 00000016 E814010000                   call      PrintHex32               ; print the result RAX = hexadecimal IP address
   360 0000001B 4989C2                       mov       r10, rax                 ; save RAX
   361 0000001E E841010000                   call      PrintCRLF
   362 00000023 4C89D0                       mov       rax, r10                 ; restore RAX
   363 00000026 E8F8000000                   call      htond
   364 0000002B E8FF000000                   call      PrintHex32
   365 00000030 E82F010000                   call      PrintCRLF
   366 00000035 EB1B                         jmp       exit      
   367                                  usage:
   368 00000037 B801000000                   mov       rax, SYS_WRITE
   369 0000003C BF01000000                   mov       rdi, STDOUT
   370 00000041 48BE-                        mov       rsi, usageMsg
   371 00000043 [0000000000000000] 
   372 0000004B BA3B000000                   mov       rdx, usageMsg.length
   373 00000050 0F05                         syscall            
   374                                  exit:
   375 00000052 B83C000000                   mov       rax, SYS_EXIT
   376 00000057 BF00000000                   mov       rdi, 0
   377 0000005C 0F05                         syscall
   378                                  
   379                                  IP2Hex:      
   380                                  ; IP2Hex : Convert the IP address pointed by RSI to hexadecimal notation
   381                                  ; RSI : pointer to a zero terminated IP address string terminated
   382                                  ;       this string must be of the form xxx.xxx.xxx.xxx
   383                                  ; RAX : hexadecimal equivalent of the IP address
   384                                  ;       if RAX = -1 : an error occured
   385                                  
   386 0000005E E8A9000000                   call      StringLength
   387 00000063 4989C1                       mov       r9, rax                  ; length in r9
   388 00000066 4883F80F                     cmp       rax, 15                  ; check maximum length
   389 0000006A 0F8F92000000                 jg        .error
   390 00000070 4883F807                     cmp       rax, 7                   ; check minimum length
   391 00000074 0F8C88000000                 jl        .error
   392 0000007A 4889F7                       mov       rdi, rsi                 ; restore string pointer
   393                                       ; check the digit groups separately
   394                                       ; put a dot at the end of the string (in place of the trailing zero)
   395 0000007D 4C01CF                       add       rdi, r9
   396 00000080 B02E                         mov       al, "."
   397 00000082 AA                           stosb
   398 00000083 4889F7                       mov       rdi, rsi                 ; restore pointer to ip address    
   399                                       ; we now read the number of dots in the ipaddress string which cannot be more than 4
   400                                       ; AL has already the byte to search for
   401 00000086 4D31C0                       xor       r8, r8                   ; help register
   402 00000089 41BC04000000                 mov       r12, 4                   ; four groups of numbers
   403                                  .nextgroup:
   404 0000008F 4831C9                       xor       rcx, rcx
   405 00000092 48F7D1                       not       rcx
   406 00000095 B02E                         mov       al, "."
   407 00000097 FC                           cld
   408 00000098 F2AE                         repne     scasb
   409 0000009A 4889CB                       mov       rbx, rcx
   410 0000009D 48F7DB                       neg       rbx
   411 000000A0 48FFCB                       dec       rbx                      ; length of first group
   412 000000A3 48FFCB                       dec       rbx
   413 000000A6 4883FB03                     cmp       rbx, 3
   414 000000AA 7F56                         jg        .error
   415 000000AC 4883FB01                     cmp       rbx, 1
   416 000000B0 7C50                         jl        .error
   417 000000B2 4901D8                       add       r8, rbx      
   418                                       ; the group is checked, now check the digits in the group
   419 000000B5 4831D2                       xor       rdx, rdx
   420 000000B8 4831C0                       xor       rax, rax
   421                                  .nextbyte:
   422 000000BB AC                           lodsb                              ; digit from RSI in AL
   423 000000BC 3C2E                         cmp       al, "."
   424 000000BE 741C                         je        .done
   425 000000C0 4889D3                       mov       rbx, rdx
   426 000000C3 48C1E303                     shl       rbx, 3
   427 000000C7 48D1E2                       shl       rdx, 1
   428 000000CA 4801DA                       add       rdx, rbx
   429 000000CD 3C30                         cmp       al, "0"
   430 000000CF 7231                         jb        .error
   431 000000D1 3C39                         cmp       al, "9"
   432 000000D3 772D                         ja        .error
   433 000000D5 240F                         and       al, 0x0F                 ; un-ascii
   434 000000D7 4801C2                       add       rdx, rax                 ; rdx = rdx + rax = rdx * 10
   435 000000DA EBDF                         jmp       .nextbyte
   436                                  .done:
   437 000000DC 4881FAFF000000               cmp       rdx, 0xFF                ; if bigger than 0xFF then error
   438 000000E3 7F1D                         jg        .error
   439 000000E5 49C1E208                     shl       r10, 8
   440 000000E9 4909D2                       or        r10, rdx
   441 000000EC 49FFCC                       dec       r12
   442 000000EF 4983FC00                     cmp       r12, 0
   443 000000F3 759A                         jne       .nextgroup
   444                                       ; end of check and conversion
   445 000000F5 4983C003                     add       r8, 3                    ; the three dots
   446 000000F9 4D39C1                       cmp       r9, r8
   447 000000FC 7504                         jne       .error
   448 000000FE 4C89D0                       mov       rax, r10                 ; return hexadecimal IP address in RAX
   449 00000101 C3                           ret
   450                                  .error:      
   451 00000102 4831C0                       xor       rax, rax
   452 00000105 48FFC0                       inc       rax
   453 00000108 48F7D8                       neg       rax
   454 0000010B C3                           ret
   455                                        
   456                                  StringLength:
   457                                  ; Length of the IP address string
   458                                  ; RSI is the pointer to a zero terminated string
   459                                  ; RAX returns the length of the string
   460 0000010C 4831C9                       xor       rcx, rcx
   461 0000010F 48F7D1                       not       rcx
   462 00000112 4831C0                       xor       rax, rax
   463 00000115 FC                           cld
   464 00000116 F2AE                         repnz     scasb
   465 00000118 48F7D9                       neg       rcx
   466 0000011B 4883E902                     sub       rcx, 2                   ; length = calculated length - length trailing zero - 1 (for two' complement)
   467 0000011F 4889C8                       mov       rax, rcx
   468 00000122 C3                           ret
   469                                  
   470                                  ; keep the next two lines together      
   471                                  htond:
   472                                  ntohd:
   473                                  ; ---
   474                                  ; Convert the host byte order to the network byte order and vice versa of a 32 bit integer.
   475                                  ; RAX : has the integer and the conversion is returned in RAX
   476 00000123 66C1C008                     rol       ax, 8
   477 00000127 C1C010                       rol       eax, 16
   478 0000012A 66C1C008                     rol       ax, 8
   479 0000012E C3                           ret
   480                                        
   481                                  PrintHex32:
   482                                  ; Print 32 bits hexadecimal to STDOUT
   483                                  ; EAX has the hexadecimal equivalent
   484                                  
   485 0000012F 4989C2                       mov       r10, rax                 ; save RAX
   486 00000132 48C1C020                     rol       rax, 32
   487 00000136 41BC08000000                 mov       r12, 8                   ; 8 nibbles to STDOUT
   488                                  .nibble:
   489 0000013C 48C1C004                     rol       rax, 4
   490 00000140 4989C0                       mov       r8, rax
   491 00000143 664531C0                     xor       r8w, r8w
   492 00000147 0C30                         or        al, "0"                  ; make ASCII
   493 00000149 3C39                         cmp       al, "9"
   494 0000014B 7602                         jbe       .printnibble
   495 0000014D 0407                         add       al, 7
   496                                  .printnibble:
   497 0000014F E82C000000                   call      PrintChar
   498 00000154 4C89C0                       mov       rax, r8
   499 00000157 49FFCC                       dec       r12
   500 0000015A 4983FC00                     cmp       r12, 0
   501 0000015E 75DC                         jne       .nibble
   502 00000160 4C89D0                       mov       rax, r10                 ; restore RAX
   503 00000163 C3                           ret
   504                                  
   505                                  PrintCRLF:      
   506 00000164 48BE-                        mov       rsi, crlf
   507 00000166 [3B00000000000000] 
   508 0000016E BA01000000                   mov       rdx, 1
   509 00000173 BF01000000                   mov       rdi, STDOUT
   510 00000178 B801000000                   mov       rax, SYS_WRITE
   511 0000017D 0F05                         syscall
   512 0000017F C3                           ret
   513                                        
   514                                  PrintChar:
   515 00000180 880425[00000000]             mov       BYTE [buffer], al
   516 00000187 48BE-                        mov       rsi, buffer
   517 00000189 [0000000000000000] 
   518 00000191 BA01000000                   mov       rdx, 1
   519 00000196 BF01000000                   mov       rdi, STDOUT
   520 0000019B B801000000                   mov       eax, SYS_WRITE
   521 000001A0 0F05                         syscall
   522 000001A2 C3                           ret
