     1                                  ; Name:         getpostparams
     2                                  ; Build:        see makefile
     3                                  ; Description:  Get the post parameters.
     4                                  ; Use:          This program allow us to see the posted parameters from almost any website.
     5                                  ; Disadvantage: Posted files contents can corrupt the output on the webbrowser, a work around wil
     6                                  ;               be made soon and wil show the file contents in hexademal.
     7                                  ; How to test:  in a terminal type export CONTENT_LENGTH=[value for content length]
     8                                  ;               start the application
     9                                  ;               once 'parameters stripped from HTTP header: <i><b>' is on screen you can type your
    10                                  ;               parameter-value pairs like an url string and press enter.
    11                                  ;               You should see those in the output.
    12                                  ;               example: export CONTENT_LENGTH=14
    13                                  ;               as input a=10&b=20&c=30.
    14                                  
    15                                  bits 64
    16                                  
   333                                  [list -]
   334                                  
   335                                  section .bss
   336                                  
   337 00000000 <res 00000008>               oldbrkaddr:         resq  1
   338 00000008 <res 00000008>               contentlength:      resq  1
   339                                  
   340 00000010 <res 00000001>               buffer:             resb  1
   341                                       buffer.length:      equ   $-buffer
   342                                  
   343                                  section .data
   344                                  
   345                                  top:
   346 00000000 436F6E74656E742D74-         db 'Content-type: text/html', 0x0A, 0x0A
   347 00000009 7970653A2074657874-
   348 00000012 2F68746D6C0A0A     
   349 00000019 3C21444F4354595045-         db '<!DOCTYPE html><html><head><title>CGI : Get POST parameters</title></head>'
   350 00000022 2068746D6C3E3C6874-
   351 0000002B 6D6C3E3C686561643E-
   352 00000034 3C7469746C653E4347-
   353 0000003D 49203A204765742050-
   354 00000046 4F535420706172616D-
   355 0000004F 65746572733C2F7469-
   356 00000058 746C653E3C2F686561-
   357 00000061 643E               
   358 00000063 3C626F64793E3C7072-         db '<body><pre><h1>Get POST parameters</h1><br /><span>',10
   359 0000006C 653E3C68313E476574-
   360 00000075 20504F535420706172-
   361 0000007E 616D65746572733C2F-
   362 00000087 68313E3C6272202F3E-
   363 00000090 3C7370616E3E0A     
   364                                  requiredVar:    
   365 00000097 434F4E54454E545F4C-         db 'CONTENT_LENGTH'
   366 000000A0 454E475448         
   367                                  requiredVar.length: equ $-requiredVar    
   368 000000A5 3A203C693E3C623E            db ': <i><b>'
   369                                  top.length: equ $-top
   370                                  
   371                                  nrparams:
   372 000000AD 3C2F623E3C2F693E20-         db '</b></i> bytes.</span><br /><span>parameters stripped from HTTP header: <i><b>'
   373 000000B6 62797465732E3C2F73-
   374 000000BF 70616E3E3C6272202F-
   375 000000C8 3E3C7370616E3E7061-
   376 000000D1 72616D657465727320-
   377 000000DA 737472697070656420-
   378 000000E3 66726F6D2048545450-
   379 000000EC 206865616465723A20-
   380 000000F5 3C693E3C623E       
   381                                  nrparams.length: equ $-nrparams
   382                                  
   383                                  table:
   384 000000FB 3C2F623E3C2F693E3C-         db '</b></i><br /><br />'
   385 00000104 6272202F3E3C627220-
   386 0000010D 2F3E               
   387 0000010F 3C7461626C6520616C-         db '<table align="left" width="25',0x25,'" border="0" cellpadding="0" cellspacing="0" class="params">'
   388 00000118 69676E3D226C656674-
   389 00000121 222077696474683D22-
   390 0000012A 3235252220626F7264-
   391 00000133 65723D223022206365-
   392 0000013C 6C6C70616464696E67-
   393 00000145 3D2230222063656C6C-
   394 0000014E 73706163696E673D22-
   395 00000157 302220636C6173733D-
   396 00000160 22706172616D73223E 
   397 00000169 3C74723E3C74643E3C-         db '<tr><td><b><u>name</u></b></td><td><b><u>value</u></b></td></tr><tr><td class="name">'
   398 00000172 623E3C753E6E616D65-
   399 0000017B 3C2F753E3C2F623E3C-
   400 00000184 2F74643E3C74643E3C-
   401 0000018D 623E3C753E76616C75-
   402 00000196 653C2F753E3C2F623E-
   403 0000019F 3C2F74643E3C2F7472-
   404 000001A8 3E3C74723E3C746420-
   405 000001B1 636C6173733D226E61-
   406 000001BA 6D65223E           
   407                                  table.length: equ $-table
   408                                  
   409                                  newcolumn:
   410 000001BE 3C2F74643E3C746420-         db '</td><td class="value">'
   411 000001C7 636C6173733D227661-
   412 000001D0 6C7565223E         
   413                                  newcolumn.length: equ $-newcolumn
   414                                  
   415                                  middle:    
   416 000001D5 3C2F74643E3C2F7472-         db '</td></tr><tr><td class="name">'
   417 000001DE 3E3C74723E3C746420-
   418 000001E7 636C6173733D226E61-
   419 000001F0 6D65223E           
   420                                  middle.length: equ $-middle
   421                                  
   422                                  bottom:
   423 000001F4 3C2F74643E3C2F7472-         db '</td></tr></table></pre></body></html>'
   424 000001FD 3E3C2F7461626C653E-
   425 00000206 3C2F7072653E3C2F62-
   426 0000020F 6F64793E3C2F68746D-
   427 00000218 6C3E               
   428                                  bottom.length: equ $-bottom
   429                                  
   430                                  htmlbr:
   431 0000021A 3C6272202F3E                db '<br />'
   432                                  htmlbr.length: equ $-htmlbr    
   433                                  
   434                                  section .text
   435                                       global _start
   436                                  
   437                                  _start:
   438                                       ; write the first part of the webpage
   439 00000000 48BE-                        mov         rsi, top
   440 00000002 [0000000000000000] 
   441 0000000A BAAD000000                   mov         rdx, top.length
   442 0000000F BF01000000                   mov         rdi, STDOUT
   443 00000014 B801000000                   mov         rax, SYS_WRITE
   444 00000019 0F05                         syscall
   445                                       
   446                                       ; adjust the stack to point to the web servers variables
   447 0000001B 58                           pop         rax
   448 0000001C 58                           pop         rax
   449 0000001D 58                           pop         rax
   450 0000001E FC                           cld
   451                                       ; let's loop through the webserver variables
   452                                  .getvariable:
   453 0000001F 5E                           pop         rsi
   454 00000020 4809F6                       or          rsi, rsi                ; done yet?
   455 00000023 0F8453010000                 jz          .done
   456                                       
   457                                       ; RSI contains a pointer to CONTENT_LENGTH the variable we are searching for
   458                                       ; look for the required variable name amongst them
   459 00000029 B90E000000                   mov         rcx, requiredVar.length
   460 0000002E 48BF-                        mov         rdi, requiredVar
   461 00000030 [9700000000000000] 
   462 00000038 F3A6                         rep         cmpsb                   ; compare RCX bytes
   463 0000003A 75E3                         jne         .getvariable            ; no match get the next variable, if any
   464                                       
   465                                       ; we found the variable, parse the length of the post parameters
   466                                       ; RSI points to the = sign, increment RSI to point to the character after '='
   467 0000003C 48FFC6                       inc         rsi
   468                                       
   469                                       ; initialise rcx, rcx wil contain the hexadecimal value of CONTENT_LENGTH
   470 0000003F 4831C9                       xor       rcx, rcx
   471                                  .nextparamstringchar:
   472 00000042 4831C0                       xor       rax, rax
   473 00000045 AC                           lodsb                               ; get digit
   474 00000046 3C00                         cmp       al, 0                   ; if 0 then no digits
   475 00000048 7439                         je        .endofparamstring
   476                                       
   477 0000004A 4831D2                       xor       rdx, rdx
   478 0000004D BB0A000000                   mov       rbx, 10
   479 00000052 480FAFCB                     imul      rcx, rbx
   480 00000056 880425[10000000]             mov       BYTE[buffer], al
   481 0000005D 240F                         and       al, 0x0F
   482 0000005F 4801C1                       add       rcx, rax                ; previous digit x 10 + current digit
   483                                       
   484 00000062 56                           push      rsi
   485 00000063 48BE-                        mov       rsi, buffer
   486 00000065 [1000000000000000] 
   487 0000006D BA01000000                   mov       rdx, buffer.length
   488 00000072 BF01000000                   mov       rdi, STDOUT
   489 00000077 51                           push	     rcx
   490 00000078 B801000000                   mov       rax, SYS_WRITE
   491 0000007D 0F05                         syscall
   492 0000007F 59                           pop       rcx
   493 00000080 5E                           pop       rsi
   494                                       
   495 00000081 EBBF                         jmp       .nextparamstringchar
   496                                  .endofparamstring:
   497                                  
   498 00000083 48FFC1                       inc 	     rcx
   499 00000086 48890C25[08000000]           mov		QWORD[contentlength], rcx
   500                                  
   501                                       ; end the number of parameters in HTML
   502                                  
   503 0000008E 48BE-                        mov       rsi, nrparams
   504 00000090 [AD00000000000000] 
   505 00000098 BA4E000000                   mov       rdx, nrparams.length
   506 0000009D BF01000000                   mov       rdi, STDOUT
   507 000000A2 B801000000                   mov       rax, SYS_WRITE
   508 000000A7 0F05                         syscall
   509                                       
   510                                       ; RCX contains the content_length in hexadecimal
   511                                       ; reserve space on, the heap to store the parameters from STDIN
   512                                  
   513 000000A9 BF00000000                   mov       rdi, 0
   514 000000AE B80C000000                   mov       rax, SYS_BRK
   515 000000B3 0F05                         syscall
   516                                       
   517 000000B5 48890425[00000000]           mov       QWORD[oldbrkaddr], rax  ; save the address to de-allocate memory
   518                                  
   519                                       ; reserve memory for the parameters
   520 000000BD 48030425[08000000]           add       rax, QWORD[contentlength]
   521                                       
   522 000000C5 4889C7                       mov       rdi, rax
   523 000000C8 B80C000000                   mov       rax, SYS_BRK
   524 000000CD 0F05                         syscall
   525                                       
   526 000000CF 4821C0                       and       rax, rax
   527 000000D2 0F84A4000000                 jz        .done                   ; if RAX = 0 then no memory is available, now we exit
   528                                  
   529                                       ; read the params in our created buffer                                
   530                                       
   531 000000D8 488B3425[00000000]           mov       rsi, QWORD[oldbrkaddr]
   532 000000E0 488B1425[08000000]           mov       rdx, QWORD[contentlength]                ; length of the parameterstring
   533 000000E8 BF00000000                   mov       rdi, STDIN
   534 000000ED B800000000                   mov       rax, SYS_READ
   535 000000F2 0F05                         syscall
   536                                       
   537                                       ; print the entire parameterstring
   538                                       ; rsi and rdx already contains the string to print and the string length
   539 000000F4 BF01000000                   mov       rdi, STDOUT
   540 000000F9 B801000000                   mov       rax, SYS_WRITE
   541 000000FE 0F05                         syscall
   542                                       
   543 00000100 48BE-                        mov       rsi, table
   544 00000102 [FB00000000000000] 
   545 0000010A BAC3000000                   mov       rdx, table.length
   546 0000010F BF01000000                   mov       rdi, STDOUT
   547 00000114 B801000000                   mov       rax, SYS_WRITE
   548 00000119 0F05                         syscall
   549                                       
   550 0000011B 90                           nop
   551                                       ; parse the parameter string
   552 0000011C 488B3425[00000000]           mov       rsi, QWORD[oldbrkaddr]
   553                                  .nextbyte:
   554 00000124 4831C0                       xor       rax, rax
   555 00000127 AC                           lodsb                               ; read byte
   556                                       
   557 00000128 56                           push      rsi                     ; save pointer
   558 00000129 3C00                         cmp       al, 0
   559 0000012B 744F                         je        .done                   ; if zero -> end of string
   560 0000012D 3C3D                         cmp       al, '='
   561 0000012F 741C                         je        .newcolumn              ; if '=' -> next byte is parametervalue
   562 00000131 3C26                         cmp       al, '&'
   563 00000133 7429                         je        .newrow                 ; if '&' -> next byte is parametername
   564 00000135 880425[10000000]             mov       BYTE[buffer], al        ; otherwise print the byte
   565                                  
   566                                       ; write the character in the buffer
   567 0000013C 48BE-                        mov       rsi, buffer
   568 0000013E [1000000000000000] 
   569 00000146 BA01000000                   mov       rdx, buffer.length
   570 0000014B EB20                         jmp       .writechar
   571                                       
   572                                       ; end previous column and start new one
   573                                  .newcolumn:
   574 0000014D 48BE-                        mov       rsi, newcolumn
   575 0000014F [BE01000000000000] 
   576 00000157 BA17000000                   mov       rdx, newcolumn.length
   577 0000015C EB0F                         jmp       .writechar
   578                                       
   579                                       ; end previous row and start new one
   580                                  .newrow:
   581 0000015E 48BE-                        mov       rsi, middle
   582 00000160 [D501000000000000] 
   583 00000168 BA1F000000                   mov       rdx, middle.length
   584                                       
   585                                       ; write to STDOUT
   586                                  .writechar:    
   587 0000016D BF01000000                   mov       rdi, STDOUT
   588 00000172 B801000000                   mov       rax, SYS_WRITE
   589 00000177 0F05                         syscall
   590 00000179 5E                           pop       rsi
   591 0000017A EBA8                         jmp       .nextbyte
   592                                  
   593                                  .done:
   594                                       ; free the allocated memory
   595 0000017C 488B3C25[00000000]           mov       rdi, QWORD[oldbrkaddr]
   596 00000184 B80C000000                   mov       rax, SYS_BRK
   597 00000189 0F05                         syscall
   598                                  
   599                                       ; we are at the end of our search, print the rest of the HTML form
   600                                       
   601 0000018B 48BE-                        mov       rsi, bottom
   602 0000018D [F401000000000000] 
   603 00000195 BA26000000                   mov       rdx, bottom.length
   604 0000019A BF01000000                   mov       rdi, STDOUT
   605 0000019F B801000000                   mov       rax, SYS_WRITE
   606 000001A4 0F05                         syscall
   607                                       
   608 000001A6 4831FF                       xor       rdi, rdi
   609 000001A9 B83C000000                   mov       rax, SYS_EXIT
   610 000001AE 0F05                         syscall
