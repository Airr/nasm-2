     1                                  ; Name:         rawpostdata.asm
     2                                  ; Build:        see makefile
     3                                  ; Description:  Get the posted data and display it in characters and hexadecimal values.
     4                                  ;               This program has advantage over getpostparams that all the posted data is shown
     5                                  ;               with (I hope) any CONTENT-TYPE.  I use this as a tool to see if data from a website
     6                                  ;               or from cgi is actually arrived, if not an error occured.
     7                                  ;               It is also a tool to exploit the header for file uploads. (but that's another example)
     8                                  ; Use:          This program allow us to see the posted data from any (???) website.
     9                                  
    10                                  BITS 64
    11                                  
    12                                  %define MAX_FILESIZE    5120            ; max is 5120 bytes, enough for the demo
    13                                  %define COLUMNS         16              ; 16 bytes in a row
    14                                  
   331                                  [list -]
   332                                  
   333                                  section .bss
   334                                  
   335 00000000 <res 00000008>          oldbrkaddr:    resq    1
   336 00000008 <res 00000008>          contentsize:   resq    1
   337                                  
   338                                  section .data
   339                                  
   340                                  requestmethod:
   341 00000000 524551554553545F4D-                    db      'REQUEST_METHOD=POST'
   342 00000009 4554484F443D504F53-
   343 00000012 54                 
   344                                  .length:       equ     $-requestmethod
   345                                  contentlength:
   346 00000013 434F4E54454E545F4C-                    db      'CONTENT_LENGTH='
   347 0000001C 454E4754483D       
   348                                  .length:       equ     $-contentlength
   349                                  
   350 00000022 436F6E74656E742D74-     top:           db      'Content-type: text/html', 0x0A, 0x0A
   351 0000002B 7970653A2074657874-
   352 00000034 2F68746D6C0A0A     
   353 0000003B 3C21444F4354595045-                    db      '<!DOCTYPE html><html><head>'
   354 00000044 2068746D6C3E3C6874-
   355 0000004D 6D6C3E3C686561643E 
   356 00000056 3C7469746C653E5368-                    db      '<title>Show RAW POST DATA</title>'
   357 0000005F 6F772052415720504F-
   358 00000068 535420444154413C2F-
   359 00000071 7469746C653E       
   360 00000077 3C2F686561643E3C62-                    db      '</head><body>'
   361 00000080 6F64793E           
   362 00000084 3C7072653E3C646976-                    db      '<pre><div id="chars" style="float:left;margin-right:100px;">'
   363 0000008D 2069643D2263686172-
   364 00000096 7322207374796C653D-
   365 0000009F 22666C6F61743A6C65-
   366 000000A8 66743B6D617267696E-
   367 000000B1 2D72696768743A3130-
   368 000000BA 3070783B223E       
   369                                  .length:       equ     $-top
   370                                  
   371 000000C0 3C2F6469763E3C6469-     middle:        db      '</div><div id="hex" style="float:left; border-left: 1px solid #ccc;padding-left: 10px;">'
   372 000000C9 762069643D22686578-
   373 000000D2 22207374796C653D22-
   374 000000DB 666C6F61743A6C6566-
   375 000000E4 743B20626F72646572-
   376 000000ED 2D6C6566743A203170-
   377 000000F6 7820736F6C69642023-
   378 000000FF 6363633B7061646469-
   379 00000108 6E672D6C6566743A20-
   380 00000111 313070783B223E     
   381                                  .length:       equ     $-middle
   382                                  
   383 00000118 3C2F6469763E3C2F70-     bottom:        db      '</div></pre></body>'
   384 00000121 72653E3C2F626F6479-
   385 0000012A 3E                 
   386 0000012B 3C2F68746D6C3E                         db      '</html>'
   387                                  .length:       equ     $-bottom
   388                                  
   389 00000132 262378                  charbuffer:    db      '&#x'
   390 00000135 0000                    .value:        dw      0
   391                                  .length:       equ     $-charbuffer
   392                                  
   393 00000137 20                      hexbuffer:     db      ' '
   394 00000138 0000                    .value:        dw      0
   395                                  .length:       equ     $-hexbuffer
   396                                  
   397 0000013A 3C6272202F3E            break:         db      '<br />'
   398                                  .length:       equ  $-break
   399                                  
   400 00000140 436F6E74656E742D74-     sizelimited:   db      'Content-type: text/html', 0x0A, 0x0A
   401 00000149 7970653A2074657874-
   402 00000152 2F68746D6C0A0A     
   403 00000159 546869732066696C65-                    db      'This file is to long, sorry'
   404 00000162 20697320746F206C6F-
   405 0000016B 6E672C20736F727279 
   406                                  .length:       equ     $-sizelimited
   407                                  
   408                                  section .text
   409                                       global _start
   410                                  
   411                                  _start:
   412                                  
   413                                  ; check if the application is accessed through POST, if not just exit, no warning
   414                                       ; adjust the stack to point to the web server variables
   415 00000000 58                           pop       rax
   416 00000001 58                           pop       rax
   417 00000002 58                           pop       rax
   418 00000003 54                           push      rsp                             ; save stackpointer on stack
   419 00000004 4159                         pop       r9                              ; and put in R9
   420 00000006 FC                           cld
   421                                       ; loop through the webserver variables searching for REQUEST_METHOD=POST
   422 00000007 48BF-                        mov       rdi, requestmethod
   423 00000009 [0000000000000000] 
   424 00000011 B913000000                   mov       rcx, requestmethod.length
   425                                  searchpostvar:
   426 00000016 5E                           pop       rsi
   427 00000017 4809F6                       or        rsi, rsi                        ; done yet?
   428 0000001A 0F8444010000                 jz        Exit                            ; yes, the data was not posted     
   429 00000020 48BF-                        mov       rdi, requestmethod
   430 00000022 [0000000000000000] 
   431 0000002A B913000000                   mov       rcx, requestmethod.length
   432 0000002F F3A6                         rep       cmpsb
   433 00000031 75E3                         jne       searchpostvar                   ; still not found
   434                                  
   435                                  ; page was posted, now search for the content length
   436                                       ; adjust stack to point again to the web server variables
   437 00000033 4C89CC                       mov       rsp, r9                         ; set rsp to begin of webvariables
   438                                  @2:
   439 00000036 5E                           pop       rsi
   440 00000037 4809F6                       or        rsi, rsi                        ; done yet?
   441 0000003A 0F8424010000                 jz        Exit                            ; normally there is a contentlength variable, exit just in case there isn't
   442 00000040 48BF-                        mov       rdi, contentlength
   443 00000042 [1300000000000000] 
   444 0000004A B90F000000                   mov       rcx, contentlength.length
   445 0000004F F3A6                         rep       cmpsb
   446 00000051 75E3                         jne       @2
   447                                  
   448                                  ; the contentlength variable is found, rsi points to the first digit
   449                                  ; convert the ASCII length to hexadecimal
   450                                      ; get the value of content_length
   451 00000053 4831C9                       xor       rcx, rcx
   452 00000056 4831C0                       xor       rax, rax
   453                                  readdigit:
   454 00000059 AC                           lodsb
   455 0000005A 20C0                         and       al, al
   456 0000005C 7413                         jz        endofdigits
   457 0000005E 240F                         and       al , 0x0F
   458 00000060 4831D2                       xor       rdx, rdx
   459 00000063 BB0A000000                   mov       rbx, 10
   460 00000068 480FAFCB                     imul      rcx, rbx
   461 0000006C 4801C1                       add       rcx, rax                        ; previous digit x 10 + current digit   
   462 0000006F EBE8                         jmp       readdigit
   463                                  endofdigits:
   464                                       ; check if the file isn't too large
   465 00000071 4881F900140000               cmp       rcx, MAX_FILESIZE               ; limit the application to process files < 4096 bytes
   466                                                                                    ; this could be put in a config file later
   467 00000078 0F8FCB000000                 jg        SizeLimited
   468                                       ; store the hexadecimal content size
   469 0000007E 48890C25[08000000]           mov       QWORD[contentsize], rcx 
   470                                  
   471                                  ; Reserve space in memory and read the posted content in memory on the heap
   472                                       ; reserve space on, the heap
   473 00000086 BF00000000                   mov       rdi, 0
   474 0000008B B80C000000                   mov       rax, SYS_BRK
   475 00000090 0F05                         syscall
   476 00000092 48890425[00000000]           mov       QWORD[oldbrkaddr], rax  ; save the address to de-allocate memory
   477                                       ; reserve memory for the posted content
   478 0000009A 48030425[08000000]           add       rax, QWORD[contentsize]         ; add RCX bytes to the program break          
   479 000000A2 4889C7                       mov       rdi, rax
   480 000000A5 B80C000000                   mov       rax, SYS_BRK
   481 000000AA 0F05                         syscall
   482 000000AC 4839F8                       cmp       rax, rdi
   483 000000AF 0F85AF000000                 jne       Exit                   ; if RAX = 0 then no memory is available, we exit
   484                                       ; read the params in our created buffer                                
   485 000000B5 488B3425[00000000]           mov       rsi, QWORD[oldbrkaddr]
   486 000000BD 488B1425[08000000]           mov       rdx, QWORD[contentsize]         ; length of the parameterstring
   487 000000C5 BF00000000                   mov       rdi, STDIN
   488 000000CA B800000000                   mov       rax, SYS_READ
   489 000000CF 0F05                         syscall
   490                                       ; write the first part of the webform to STDOUT
   491 000000D1 48BE-                        mov       rsi, top
   492 000000D3 [2200000000000000] 
   493 000000DB BA9E000000                   mov       rdx, top.length
   494 000000E0 BF01000000                   mov       rdi, STDOUT
   495 000000E5 B801000000                   mov       rax, SYS_WRITE
   496 000000EA 0F05                         syscall
   497                                            
   498                                       ; convert all bytes in the buffer to chars
   499 000000EC 41BA00000000                 mov       r10, 0                          ; 0 = to char, 1 = to hex
   500 000000F2 E877000000                   call      ConvertBuffer
   501                                       
   502                                       ; all bytes are processed to characters, close the div and open new one
   503 000000F7 48BE-                        mov       rsi, middle
   504 000000F9 [C000000000000000] 
   505 00000101 BA58000000                   mov       rdx, middle.length
   506 00000106 BF01000000                   mov       rdi, STDOUT
   507 0000010B B801000000                   mov       rax, SYS_WRITE
   508 00000110 0F05                         syscall
   509                                       
   510                                       ;convert now convert all bytes to hexadecimal
   511 00000112 41BA01000000                 mov       r10, 1
   512 00000118 E851000000                   call      ConvertBuffer
   513                                       
   514                                       ; print the rest of the page to STDOUT
   515 0000011D BF01000000                   mov       rdi, STDOUT
   516 00000122 48BE-                        mov       rsi, bottom
   517 00000124 [1801000000000000] 
   518 0000012C BA1A000000                   mov       rdx, bottom.length
   519 00000131 B801000000                   mov       rax, SYS_WRITE
   520 00000136 0F05                         syscall
   521                                       
   522                                       ; free the allocated memory
   523 00000138 488B3C25[00000000]           mov       rdi, QWORD[oldbrkaddr]
   524 00000140 B80C000000                   mov       rax, SYS_BRK
   525 00000145 0F05                         syscall
   526 00000147 EB1B                         jmp       Exit
   527                                      
   528                                  SizeLimited:
   529 00000149 BF01000000                   mov       rdi, STDOUT
   530 0000014E 48BE-                        mov       rsi, sizelimited
   531 00000150 [4001000000000000] 
   532 00000158 BA34000000                   mov       rdx, sizelimited.length
   533 0000015D B801000000                   mov       rax, SYS_WRITE
   534 00000162 0F05                         syscall
   535                                  
   536                                  Exit:    
   537 00000164 4831FF                       xor       rdi, rdi
   538 00000167 B83C000000                   mov       rax, SYS_EXIT
   539 0000016C 0F05                         syscall
   540                                       
   541                                  ConvertBuffer:
   542 0000016E 488B3425[00000000]           mov       rsi, QWORD[oldbrkaddr]
   543 00000176 488B0C25[08000000]           mov       rcx, QWORD[contentsize]
   544 0000017E 4D31C0                       xor       r8, r8                          ; chars in one line
   545                                  .repeat:    
   546 00000181 4831C0                       xor       rax, rax
   547 00000184 AC                           lodsb                                     ; byte in AL
   548 00000185 49FFC0                       inc       r8
   549 00000188 4983FA01                     cmp       r10, 1
   550 0000018C 740A                         je        .convert                        ; skip unprintable char replacement
   551 0000018E 3C20                         cmp       al, 0x20
   552 00000190 7204                         jb        .changetodot
   553 00000192 3C7E                         cmp       al, 0x7E
   554 00000194 7602                         jbe       .convert
   555                                  .changetodot:
   556 00000196 B02E                         mov       al, '.'
   557                                  .convert:    
   558 00000198 51                           push      rcx                             ; save loop counter
   559 00000199 56                           push      rsi                             ; save buffer pointer
   560 0000019A 66C1E004                     shl       ax, 4
   561 0000019E C0E804                       shr       al, 4
   562 000001A1 660D3030                     or        ax, 0x3030
   563 000001A5 3C39                         cmp       al, "9"
   564 000001A7 7E02                         jle       .phigh
   565 000001A9 0407                         add       al, 7
   566                                  .phigh:            
   567 000001AB 80FC39                       cmp       ah, "9"
   568 000001AE 7E03                         jle       .pbyte
   569 000001B0 80C407                       add       ah, 7
   570                                  .pbyte:
   571 000001B3 66C1C008                     rol       ax, 8
   572 000001B7 4983FA01                     cmp       r10, 1
   573 000001BB 7419                         je        .toHex
   574 000001BD 66890425[35010000]           mov       WORD [charbuffer.value], ax
   575 000001C5 48BE-                        mov       rsi, charbuffer
   576 000001C7 [3201000000000000] 
   577 000001CF BA05000000                   mov       rdx, charbuffer.length
   578 000001D4 EB17                         jmp       .write
   579                                  .toHex:
   580 000001D6 66890425[38010000]           mov       WORD [hexbuffer.value], ax
   581 000001DE 48BE-                        mov       rsi, hexbuffer
   582 000001E0 [3701000000000000] 
   583 000001E8 BA03000000                   mov       rdx, hexbuffer.length
   584                                  .write:
   585 000001ED BF01000000                   mov       rdi, STDOUT
   586 000001F2 B801000000                   mov       rax, SYS_WRITE
   587 000001F7 0F05                         syscall
   588 000001F9 5E                           pop       rsi
   589 000001FA 59                           pop       rcx
   590 000001FB 4983F810                     cmp       r8, COLUMNS                      ; max chars in one line
   591 000001FF 7C22                         jl        .continue
   592                                       ; print end of line
   593 00000201 4D31C0                       xor       r8, r8
   594 00000204 56                           push      rsi
   595 00000205 51                           push      rcx
   596 00000206 48BE-                        mov       rsi, break
   597 00000208 [3A01000000000000] 
   598 00000210 BA06000000                   mov       rdx, break.length
   599 00000215 BF01000000                   mov       rdi, STDOUT
   600 0000021A B801000000                   mov       rax, SYS_WRITE
   601 0000021F 0F05                         syscall
   602 00000221 59                           pop       rcx
   603 00000222 5E                           pop       rsi
   604                                  .continue:
   605 00000223 48FFC9                       dec       rcx
   606 00000226 4883F900                     cmp       rcx, 0
   607 0000022A 0F8551FFFFFF                 jne       .repeat
   608 00000230 C3                           ret
