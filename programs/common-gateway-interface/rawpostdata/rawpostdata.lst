     1                                  ;***********************************************************************************************
     2                                  ; Name:         rawpostdata.asm
     3                                  ; Build:        see makefile
     4                                  ; Description:  Get the posted data and display it in characters and hexadecimal values.
     5                                  ;               This program has advantage over getpostparams that all the posted data is shown
     6                                  ;               with (I hope) any CONTENT-TYPE.  I use this as a tool to see if data from a website
     7                                  ;               or from cgi is actually arrived, if not an error occured.
     8                                  ;               It is also a tool to exploit the header for file uploads. (but that's another example)
     9                                  ; Use:          This program allow us to see the posted data from almost any website.
    10                                  ; Disadvantage: Posted files contents can corrupt the output on the webbrowser, a work around wil
    11                                  ;               be made soon and will show the file contents in hexademal.
    12                                  ;***********************************************************************************************
    13                                  
    14                                  BITS 64
    15                                  
    16                                  %define MAX_FILESIZE    5120            ; max is 5120 bytes, enough for the demo
    17                                  %define COLUMNS         16              ; 16 bytes in a row
    18                                  
   416                                  [list -]
   417                                  
   418                                  section .bss
   419                                  
   420 00000000 <res 00000008>          oldbrkaddr:       resq    1
   421 00000008 <res 00000008>          contentsize:      resq    1
   422                                  
   423                                  section .data
   424                                  
   425                                  requestmethod:
   426 00000000 524551554553545F4D-                db      'REQUEST_METHOD=POST'
   427 00000009 4554484F443D504F53-
   428 00000012 54                 
   429                                  .length:   equ     $-requestmethod
   430                                  contentlength:
   431 00000013 434F4E54454E545F4C-                db      'CONTENT_LENGTH='
   432 0000001C 454E4754483D       
   433                                  .length:   equ     $-contentlength
   434                                  
   435 00000022 436F6E74656E742D74-     top:       db      'Content-type: text/html', 0x0A, 0x0A
   436 0000002B 7970653A2074657874-
   437 00000034 2F68746D6C0A0A     
   438 0000003B 3C21444F4354595045-                db      '<!DOCTYPE html><html><head>'
   439 00000044 2068746D6C3E3C6874-
   440 0000004D 6D6C3E3C686561643E 
   441 00000056 3C7469746C653E5368-                db      '<title>Show RAW POST DATA</title>'
   442 0000005F 6F772052415720504F-
   443 00000068 535420444154413C2F-
   444 00000071 7469746C653E       
   445 00000077 3C2F686561643E3C62-                db      '</head><body>'
   446 00000080 6F64793E           
   447                                             ;db      '<h1>RAW POST DATA</h1>'
   448 00000084 3C7072653E3C646976-                db      '<pre><div id="chars" style="float:left;margin-right:100px;">'
   449 0000008D 2069643D2263686172-
   450 00000096 7322207374796C653D-
   451 0000009F 22666C6F61743A6C65-
   452 000000A8 66743B6D617267696E-
   453 000000B1 2D72696768743A3130-
   454 000000BA 3070783B223E       
   455                                  .length:   equ     $-top
   456                                  
   457 000000C0 3C2F6469763E3C6469-     middle:    db      '</div><div id="hex" style="float:left; border-left: 1px solid #ccc;padding-left: 10px;">'
   458 000000C9 762069643D22686578-
   459 000000D2 22207374796C653D22-
   460 000000DB 666C6F61743A6C6566-
   461 000000E4 743B20626F72646572-
   462 000000ED 2D6C6566743A203170-
   463 000000F6 7820736F6C69642023-
   464 000000FF 6363633B7061646469-
   465 00000108 6E672D6C6566743A20-
   466 00000111 313070783B223E     
   467                                  .length:   equ     $-middle
   468                                  
   469 00000118 3C2F6469763E3C2F70-     bottom:    db      '</div></pre></body>'
   470 00000121 72653E3C2F626F6479-
   471 0000012A 3E                 
   472 0000012B 3C2F68746D6C3E                     db      '</html>'
   473                                  .length:   equ     $-bottom
   474                                  
   475 00000132 262378                  charbuffer:     db      '&#x'
   476 00000135 0000                    .value:         dw      0
   477                                  .length:        equ     $-charbuffer
   478                                  
   479 00000137 20                      hexbuffer:      db      ' '
   480 00000138 0000                    .value:         dw      0
   481                                  .length:        equ     $-hexbuffer
   482                                  
   483 0000013A 3C6272202F3E            break:     db      '<br />'
   484                                  .length:   equ  $-break
   485                                  
   486 00000140 436F6E74656E742D74-     sizelimited:    db      'Content-type: text/html', 0x0A, 0x0A
   487 00000149 7970653A2074657874-
   488 00000152 2F68746D6C0A0A     
   489 00000159 546869732066696C65-                     db      'This file is to long, sorry'
   490 00000162 20697320746F206C6F-
   491 0000016B 6E672C20736F727279 
   492                                  .length:        equ     $-sizelimited
   493                                  
   494                                  section .text
   495                                          global _start
   496                                  
   497                                  _start:
   498                                  
   499                                  ; check if the application is accessed through POST, if not just exit, no warning
   500                                      ; adjust the stack to point to the web server variables
   501 00000000 58                          pop         rax
   502 00000001 58                          pop         rax
   503 00000002 58                          pop         rax
   504 00000003 54                          push        rsp                             ; save stackpointer on stack
   505 00000004 4159                        pop         r9                              ; and put in R9
   506 00000006 FC                          cld
   507                                      ; loop through the webserver variables searching for REQUEST_METHOD=POST
   508 00000007 48BF-                       mov         rdi, requestmethod
   509 00000009 [0000000000000000] 
   510 00000011 B913000000                  mov         rcx, requestmethod.length
   511                                  searchpostvar:
   512 00000016 5E                          pop         rsi
   513 00000017 4809F6                      or          rsi, rsi                        ; done yet?
   514 0000001A 0F8444010000                jz          Exit                            ; yes, the data was not posted     
   515 00000020 48BF-                       mov         rdi, requestmethod
   516 00000022 [0000000000000000] 
   517 0000002A B913000000                  mov         rcx, requestmethod.length
   518 0000002F F3A6                        rep         cmpsb
   519 00000031 75E3                        jne         searchpostvar                   ; still not found
   520                                  
   521                                  ; page was posted, now search for the content length
   522                                      ; adjust stack to point again to the web server variables
   523 00000033 4C89CC                      mov         rsp, r9                         ; set rsp to begin of webvariables
   524                                  @2:
   525 00000036 5E                          pop         rsi
   526 00000037 4809F6                      or          rsi, rsi                        ; done yet?
   527 0000003A 0F8424010000                jz          Exit                            ; normally there is a contentlength variable, exit just in case there isn't
   528 00000040 48BF-                       mov         rdi, contentlength
   529 00000042 [1300000000000000] 
   530 0000004A B90F000000                  mov         rcx, contentlength.length
   531 0000004F F3A6                        rep         cmpsb
   532 00000051 75E3                        jne         @2
   533                                  
   534                                  ; the contentlength variable is found, rsi points to the first digit
   535                                  ; convert the ASCII length to hexadecimal
   536                                      ; get the value of content_length
   537 00000053 4831C9                      xor         rcx, rcx
   538 00000056 4831C0                      xor         rax, rax
   539                                  readdigit:
   540 00000059 AC                          lodsb
   541 0000005A 20C0                        and         al, al
   542 0000005C 7413                        jz          endofdigits
   543 0000005E 240F                        and         al , 0x0F
   544 00000060 4831D2                      xor         rdx, rdx
   545 00000063 BB0A000000                  mov         rbx, 10
   546 00000068 480FAFCB                    imul        rcx, rbx
   547 0000006C 4801C1                      add         rcx, rax                        ; previous digit x 10 + current digit   
   548 0000006F EBE8                        jmp         readdigit
   549                                  endofdigits:
   550                                      ; check if the file isn't too large
   551 00000071 4881F900140000              cmp         rcx, MAX_FILESIZE               ; limit the application to process files < 4096 bytes
   552                                                                                  ; this could be put in a config file later
   553 00000078 0F8FCB000000                jg          SizeLimited
   554                                      ; store the hexadecimal content size
   555 0000007E 48890C25[08000000]          mov         QWORD[contentsize], rcx 
   556                                  
   557                                  ; Reserve space in memory and read the posted content in memory on the heap
   558                                      ; reserve space on, the heap
   559 00000086 BF00000000                  mov         rdi, 0
   560 0000008B B80C000000                  mov         rax, SYS_BRK
   561 00000090 0F05                        syscall
   562 00000092 48890425[00000000]          mov         QWORD[oldbrkaddr], rax  ; save the address to de-allocate memory
   563                                      ; reserve memory for the posted content
   564 0000009A 48030425[08000000]          add         rax, QWORD[contentsize]         ; add RCX bytes to the program break          
   565 000000A2 4889C7                      mov         rdi, rax
   566 000000A5 B80C000000                  mov         rax, SYS_BRK
   567 000000AA 0F05                        syscall
   568 000000AC 4839F8                      cmp         rax, rdi
   569 000000AF 0F85AF000000                jne          Exit                   ; if RAX = 0 then no memory is available, we exit
   570                                      ; read the params in our created buffer                                
   571 000000B5 488B3425[00000000]          mov         rsi, QWORD[oldbrkaddr]
   572 000000BD 488B1425[08000000]          mov         rdx, QWORD[contentsize]         ; length of the parameterstring
   573 000000C5 BF00000000                  mov         rdi, STDIN
   574 000000CA B800000000                  mov         rax, SYS_READ
   575 000000CF 0F05                        syscall
   576                                      ; write the first part of the webform to STDOUT
   577 000000D1 48BE-                       mov         rsi, top
   578 000000D3 [2200000000000000] 
   579 000000DB BA9E000000                  mov         rdx, top.length
   580 000000E0 BF01000000                  mov         rdi, STDOUT
   581 000000E5 B801000000                  mov         rax, SYS_WRITE
   582 000000EA 0F05                        syscall
   583                                         
   584                                      ; convert all bytes in the buffer to chars
   585 000000EC 41BA00000000                mov         r10, 0                          ; 0 = to char, 1 = to hex
   586 000000F2 E877000000                  call        ConvertBuffer
   587                                      
   588                                      ; all bytes are processed to characters, close the div and open new one
   589 000000F7 48BE-                       mov         rsi, middle
   590 000000F9 [C000000000000000] 
   591 00000101 BA58000000                  mov         rdx, middle.length
   592 00000106 BF01000000                  mov         rdi, STDOUT
   593 0000010B B801000000                  mov         rax, SYS_WRITE
   594 00000110 0F05                        syscall
   595                                      
   596                                      ;convert now convert all bytes to hexadecimal
   597 00000112 41BA01000000                mov         r10, 1
   598 00000118 E851000000                  call        ConvertBuffer
   599                                      
   600                                      ; print the rest of the page to STDOUT
   601 0000011D BF01000000                  mov         rdi, STDOUT
   602 00000122 48BE-                       mov         rsi, bottom
   603 00000124 [1801000000000000] 
   604 0000012C BA1A000000                  mov         rdx, bottom.length
   605 00000131 B801000000                  mov         rax, SYS_WRITE
   606 00000136 0F05                        syscall
   607                                      
   608                                      ; free the allocated memory
   609 00000138 488B3C25[00000000]          mov         rdi, QWORD[oldbrkaddr]
   610 00000140 B80C000000                  mov         rax, SYS_BRK
   611 00000145 0F05                        syscall
   612 00000147 EB1B                        jmp         Exit
   613                                      
   614                                  SizeLimited:
   615 00000149 BF01000000                  mov         rdi, STDOUT
   616 0000014E 48BE-                       mov         rsi, sizelimited
   617 00000150 [4001000000000000] 
   618 00000158 BA34000000                  mov         rdx, sizelimited.length
   619 0000015D B801000000                  mov         rax, SYS_WRITE
   620 00000162 0F05                        syscall
   621                                  
   622                                  Exit:    
   623 00000164 4831FF                      xor         rdi, rdi
   624 00000167 B83C000000                  mov         rax, SYS_EXIT
   625 0000016C 0F05                        syscall
   626                                      
   627                                  ConvertBuffer:
   628 0000016E 488B3425[00000000]          mov         rsi, QWORD[oldbrkaddr]
   629 00000176 488B0C25[08000000]          mov         rcx, QWORD[contentsize]
   630 0000017E 4D31C0                      xor         r8, r8                          ; chars in one line
   631                                  .repeat:    
   632 00000181 4831C0                      xor         rax, rax
   633 00000184 AC                          lodsb                                       ; byte in AL
   634 00000185 49FFC0                      inc         r8
   635 00000188 4983FA01                    cmp         r10, 1
   636 0000018C 740A                        je          .convert                        ; skip unprintable char replacement
   637 0000018E 3C20                        cmp         al, 0x20
   638 00000190 7204                        jb         .changetodot
   639 00000192 3C7E                        cmp         al, 0x7E
   640 00000194 7602                        jbe         .convert
   641                                  .changetodot:
   642 00000196 B02E                        mov         al, '.'
   643                                  .convert:    
   644 00000198 51                          push        rcx                             ; save loop counter
   645 00000199 56                          push        rsi                             ; save buffer pointer
   646 0000019A 66C1E004                    shl         ax, 4
   647 0000019E C0E804                      shr         al, 4
   648 000001A1 660D3030                    or          ax, 0x3030
   649 000001A5 3C39                        cmp         al, "9"
   650 000001A7 7E02                        jle         .phigh
   651 000001A9 0407                        add         al, 7
   652                                  .phigh:            
   653 000001AB 80FC39                      cmp         ah, "9"
   654 000001AE 7E03                        jle         .pbyte
   655 000001B0 80C407                      add         ah, 7
   656                                  .pbyte:
   657 000001B3 66C1C008                    rol         ax, 8
   658 000001B7 4983FA01                    cmp         r10, 1
   659 000001BB 7419                        je          .toHex
   660 000001BD 66890425[35010000]          mov         WORD [charbuffer.value], ax
   661 000001C5 48BE-                       mov         rsi, charbuffer
   662 000001C7 [3201000000000000] 
   663 000001CF BA05000000                  mov         rdx, charbuffer.length
   664 000001D4 EB17                        jmp         .write
   665                                  .toHex:
   666 000001D6 66890425[38010000]          mov         WORD [hexbuffer.value], ax
   667 000001DE 48BE-                       mov         rsi, hexbuffer
   668 000001E0 [3701000000000000] 
   669 000001E8 BA03000000                  mov         rdx, hexbuffer.length
   670                                  .write:
   671 000001ED BF01000000                  mov         rdi, STDOUT
   672 000001F2 B801000000                  mov         rax, SYS_WRITE
   673 000001F7 0F05                        syscall
   674 000001F9 5E                          pop         rsi
   675 000001FA 59                          pop         rcx
   676 000001FB 4983F810                    cmp         r8, COLUMNS                        ; max chars in one line
   677 000001FF 7C22                        jl          .continue
   678                                      ; print end of line
   679 00000201 4D31C0                      xor         r8, r8
   680 00000204 56                          push        rsi
   681 00000205 51                          push        rcx
   682 00000206 48BE-                       mov         rsi, break
   683 00000208 [3A01000000000000] 
   684 00000210 BA06000000                  mov         rdx, break.length
   685 00000215 BF01000000                  mov         rdi, STDOUT
   686 0000021A B801000000                  mov         rax, SYS_WRITE
   687 0000021F 0F05                        syscall
   688 00000221 59                          pop         rcx
   689 00000222 5E                          pop         rsi
   690                                  .continue:
   691 00000223 48FFC9                      dec         rcx
   692 00000226 4883F900                    cmp         rcx, 0
   693 0000022A 0F8551FFFFFF                jne         .repeat
   694 00000230 C3                          ret
