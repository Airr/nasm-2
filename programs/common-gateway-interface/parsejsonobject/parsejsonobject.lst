     1                                  ;***********************************************************************************************
     2                                  ; Name:        parsejsonobject
     3                                  ; Build:       see makefile
     4                                  ; Description: reply data in the form of a JSON object.  After building this application, you need
     5                                  ;              to upload this to your webservers cgi root folder.
     6                                  ; Remark:      For those who like to observe the network traffic, you can use:
     7                                  ;              sudo tcpdump -i lo -s0 -w capture.pcap to capture the network traffic in a file
     8                                  ;              which you can open with wireshark.
     9                                  ;***********************************************************************************************
    10                                   
    11                                  BITS 64
    12                                  
   410                                  [list -]
   411                                  
   412                                  section .bss
   413                                  
   414 00000000 <res 00000008>              oldbrkaddr:         resq    1
   415 00000008 <res 00000001>              charbuffer:         resb    1
   416 00000009 <res 00000008>              content:		resq	1
   417                                      
   418                                  section .data
   419                                  
   420 00000000 524551554553545F4D-         requestmethod:      db      "REQUEST_METHOD=POST"
   421 00000009 4554484F443D504F53-
   422 00000012 54                 
   423                                        .length:          equ     $-requestmethod
   424 00000013 434F4E54454E545F4C-         contentlength:      db      "CONTENT_LENGTH="
   425 0000001C 454E4754483D       
   426                                        .length:          equ     $-contentlength
   427                                  
   428                                  top:
   429 00000022 436F6E74656E742D74-         db 'Content-type: text/html', 0x0A, 0x0A,'{"'
   430 0000002B 7970653A2074657874-
   431 00000034 2F68746D6C0A0A7B22 
   432                                  .length: equ $-top
   433                                  
   434                                  middle:
   435 0000003D 223A22                      db  '":"'
   436                                  .length:  equ    $-middle    
   437                                  
   438                                  separator:
   439 00000040 222C22                      db  '","'
   440                                  .length:   equ    $-separator
   441                                  
   442                                  bottom:
   443 00000043 227D                         db '"}'
   444                                  .length: equ $-bottom
   445                                  
   446                                  
   447                                  section .text
   448                                          global _start
   449                                  
   450                                  _start:
   451                                  
   452                                      ; first check if the form was posted
   453                                      ; adjust stack to environment parameters
   454 00000000 58                          pop         rax
   455 00000001 58                          pop         rax
   456 00000002 58                          pop         rax
   457                                      ; we are at the (list-1) of environment (web) variables
   458 00000003 4889E5                      mov         rbp, rsp                 ; save begin of list in r8
   459                                      
   460                                      ; let's loop through the webserver variables, searching for REQUEST_METHOD=POST
   461 00000006 FC                          cld
   462                                  .getrequestmethod:
   463 00000007 5E                          pop         rsi
   464 00000008 4809F6                      or          rsi, rsi                ; done yet?
   465 0000000B 0F846B010000                jz          .exit                   ; we didn't find the REQUEST_METHOD=POST string   
   466                                      ; RDI contains a pointer to CONTENT_LENGTH=POST the variable we are searching for
   467                                      ; look for the required variable name amongst them
   468 00000011 B913000000                  mov         rcx, requestmethod.length
   469 00000016 48BF-                       mov         rdi, requestmethod
   470 00000018 [0000000000000000] 
   471 00000020 F3A6                        rep         cmpsb                   ; compare RCX bytes
   472 00000022 75E3                        jne         .getrequestmethod       ; no match get the next variable, if any
   473                                      
   474                                      ; we got a match, now read the CONTENT_LENGTH
   475                                      ; restore top of (list-1)
   476 00000024 4889EC                      mov         rsp, rbp
   477 00000027 FC                          cld                                 ; just in case
   478                                  .getcontentlength:
   479 00000028 5E                          pop         rsi
   480 00000029 4809F6                      or          rsi, rsi                ; done yet
   481 0000002C 0F844A010000                jz          .exit                   ; this shouldn't occur
   482                                      ; RDI contains a pointer to CONTENT_LENGTH= the variable we are searching for
   483 00000032 B90F000000                  mov         rcx, contentlength.length
   484 00000037 48BF-                       mov         rdi, contentlength
   485 00000039 [1300000000000000] 
   486 00000041 F3A6                        rep         cmpsb                   ; compare RCX bytes
   487 00000043 75E3                        jne         .getcontentlength       ; no match get the next variable, if any
   488                                      
   489                                      ; we got the CONTENT_LENGTH=, RSI points to the first character of the ASCII digit of the length
   490                                      ; initialise rcx
   491 00000045 4831C9                      xor         rcx, rcx
   492                                  .nextparamstringchar:
   493 00000048 4831C0                      xor         rax, rax
   494 0000004B AC                          lodsb                               ; get digit
   495 0000004C 20C0                        and         al, al                   ; if 0 then no digits
   496 0000004E 7413                        je          .endofparamstring
   497                                      
   498 00000050 4831D2                      xor         rdx, rdx
   499 00000053 BB0A000000                  mov         rbx, 10
   500 00000058 480FAFCB                    imul        rcx, rbx
   501 0000005C 240F                        and         al, 0x0F
   502 0000005E 4801C1                      add         rcx, rax                ; previous digit x 10 + current digit    
   503 00000061 EBE5                        jmp         .nextparamstringchar
   504                                  .endofparamstring:   
   505                                      ; RCX contains the content_length in hexadecimal
   506                                      ; reserve space on, the heap to store the parameters from STDIN
   507                                      ;inc 	rcx			; increase by one for trailing zero
   508 00000063 48890C25[09000000]          mov		QWORD[content], rcx
   509 0000006B BF00000000                  mov         rdi, 0
   510 00000070 B80C000000                  mov         rax, SYS_BRK
   511 00000075 0F05                        syscall
   512 00000077 48890425[00000000]          mov         QWORD[oldbrkaddr], rax  ; save the address to de-allocate memory
   513                                      
   514                                      ; reserve memory for the parameters
   515 0000007F 48030425[09000000]          add         rax, QWORD[content]            ; add contentlength to the program break
   516 00000087 4889C7                      mov         rdi, rax
   517 0000008A B80C000000                  mov         rax, SYS_BRK
   518 0000008F 0F05                        syscall
   519 00000091 4883F800                    cmp         rax, 0
   520 00000095 0F84E1000000                je          .exit                   ; if RAX = 0 then no memory is available, now we exit
   521                                  
   522                                      ; read the params in our created buffer
   523 0000009B 488B3425[00000000]          mov         rsi, QWORD[oldbrkaddr]
   524 000000A3 488B1425[09000000]          mov         rdx, QWORD[content]               ; length of the parameterstring
   525 000000AB BF00000000                  mov         rdi, STDIN
   526 000000B0 B800000000                  mov         rax, SYS_READ
   527 000000B5 0F05                        syscall
   528                                      
   529                                      ; start the output of the data as a JSON object
   530 000000B7 BF01000000                  mov         rdi, STDOUT
   531 000000BC 48BE-                       mov         rsi, top
   532 000000BE [2200000000000000] 
   533 000000C6 BA1B000000                  mov         rdx, top.length
   534 000000CB B801000000                  mov         rax, SYS_WRITE
   535 000000D0 0F05                        syscall
   536                                      
   537                                      ; parse the data to a JSON object
   538                                      ; loop through the data until '='
   539 000000D2 488B3425[00000000]          mov         rsi, QWORD[oldbrkaddr]
   540 000000DA FC                          cld
   541                                  .repeat:    
   542 000000DB AC                          lodsb
   543 000000DC 20C0                        and         al, al
   544 000000DE 7472                        jz          .endloop
   545 000000E0 3C3D                        cmp         al,"="
   546 000000E2 7430                        je          .printmiddle
   547 000000E4 3C26                        cmp         al,"&"
   548 000000E6 744B                        je          .printseparator
   549 000000E8 3C2B                        cmp         al,"+"
   550 000000EA 7502                        jne         .printchar
   551                                      ; + will be replaced by space
   552 000000EC B020                        mov         al, " "
   553                                  .printchar:    
   554 000000EE 56                          push        rsi                             ; rsi on stack    
   555                                      ; print the character
   556 000000EF 880425[08000000]            mov         BYTE[charbuffer], al
   557 000000F6 48BE-                       mov         rsi, charbuffer
   558 000000F8 [0800000000000000] 
   559 00000100 BA01000000                  mov         rdx, 1
   560 00000105 BF01000000                  mov         rdi, STDOUT
   561 0000010A B801000000                  mov         rax, SYS_WRITE
   562 0000010F 0F05                        syscall
   563 00000111 5E                          pop         rsi
   564 00000112 EBC7                        jmp         .repeat
   565                                  .printmiddle:
   566 00000114 56                          push        rsi
   567 00000115 48BE-                       mov         rsi, middle
   568 00000117 [3D00000000000000] 
   569 0000011F BA03000000                  mov         rdx, middle.length
   570 00000124 BF01000000                  mov         rdi, STDOUT
   571 00000129 B801000000                  mov         rax, SYS_WRITE
   572 0000012E 0F05                        syscall
   573 00000130 5E                          pop         rsi
   574 00000131 EBA8                        jmp         .repeat
   575                                  .printseparator:
   576 00000133 56                          push        rsi
   577 00000134 48BE-                       mov         rsi, separator
   578 00000136 [4000000000000000] 
   579 0000013E BA03000000                  mov         rdx, separator.length
   580 00000143 BF01000000                  mov         rdi, STDOUT
   581 00000148 B801000000                  mov         rax, SYS_WRITE
   582 0000014D 0F05                        syscall
   583 0000014F 5E                          pop         rsi
   584 00000150 EB89                        jmp         .repeat
   585                                  .endloop:    
   586                                      
   587 00000152 BF01000000                  mov         rdi, STDOUT
   588 00000157 48BE-                       mov         rsi, bottom
   589 00000159 [4300000000000000] 
   590 00000161 BA02000000                  mov         rdx, bottom.length
   591 00000166 B801000000                  mov         rax, SYS_WRITE
   592 0000016B 0F05                        syscall
   593                                      
   594                                      ; release the reserved memory
   595                                      ; free the allocated memory
   596 0000016D 488B3C25[00000000]          mov         rdi, QWORD[oldbrkaddr]
   597 00000175 B80C000000                  mov         rax, SYS_BRK
   598 0000017A 0F05                        syscall
   599                                      
   600                                      ; and exit the program
   601                                  .exit:
   602 0000017C 4831FF                      xor         rdi, rdi
   603 0000017F B83C000000                  mov         rax, SYS_EXIT
   604 00000184 0F05                        syscall    
