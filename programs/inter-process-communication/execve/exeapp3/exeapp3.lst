     1                                  ; Name:         exeapp3.asm
     2                                  ; Build:        see makefile
     3                                  ; Run:          ./exeapp3
     4                                  ; Description:  Demonstration on how to execute a bash script from a program.
     5                                  ;               The program starts the sh command and executes a script named test.
     6                                  ;
     7                                  ; More info:    http://geoffgarside.co.uk/2009/08/28/using-execve-for-the-first-time/
     8                                  ;
     9                                  ; Remark:       Before running this tiny program, you have to run (only once) the following command in your terminal:
    10                                  ;               echo "echo 'hello world'" > test
    11                                  ;               or you make your own test script which the program then executes.
    12                                          
    13                                  BITS 64
    14                                  
   331                                  [list -]
   332                                  
   333                                  section .data
   334 00000000 2F62696E2F736800             filename:      db      "/bin/sh",0             ; full path!
   335                                       .length:       equ     $-filename
   336 00000008 746573742E736800             argv1:         db      "test.sh", 0            ; script to execute
   337                                       ;... put more arguments here
   338                                  
   339 00000010 444953504C41593D3A-          envp1:         db      "DISPLAY=:0",0
   340 00000019 3000               
   341 0000001B 5348454C4C3D2F6269-          envp2:         db      "SHELL=/bin/bash",0
   342 00000024 6E2F6261736800     
   343                                       
   344 0000002B [0000000000000000]           argvPtr:       dq      filename
   345 00000033 [0800000000000000]                          dq      argv1
   346                                                      ; more pointers to arguments here
   347 0000003B 0000000000000000                            dq      0                               ; terminate the list of pointers with NULL
   348                                  
   349 00000043 [1000000000000000]           envPtr:        dq      envp1
   350 0000004B [1B00000000000000]                          dq      envp2
   351 00000053 0000000000000000                            dq      0
   352                                          
   353 0000005B 666F726B206572726F-          forkerror:     db   "fork error", 10
   354 00000064 720A               
   355                                       .length:       equ  $-forkerror
   356 00000066 72657475726E206E6F-          execveerror:   db   "return not expected -> execve error for command: "
   357 0000006F 742065787065637465-
   358 00000078 64202D3E2065786563-
   359 00000081 7665206572726F7220-
   360 0000008A 666F7220636F6D6D61-
   361 00000093 6E643A20           
   362                                       .length:       equ  $-execveerror
   363                                      
   364                                  section .text
   365                                       global _start
   366                                  
   367                                  _start:
   368                                  
   369 00000000 B839000000                   mov       rax, SYS_FORK
   370 00000005 0F05                         syscall
   371 00000007 4821C0                       and       rax, rax
   372 0000000A 784C                         js        Error.Fork
   373 0000000C 7525                         jnz       ParentProcess
   374                                       
   375                                  ChildProcess:
   376                                         
   377 0000000E 48BA-                        mov       rdx, envPtr             ; pointer to environment
   378 00000010 [4300000000000000] 
   379 00000018 48BE-                        mov       rsi, argvPtr            ; array with arguments
   380 0000001A [2B00000000000000] 
   381 00000022 48BF-                        mov       rdi, filename           ; the command
   382 00000024 [0000000000000000] 
   383 0000002C B83B000000                   mov       rax, SYS_EXECVE         ; syscall execute
   384 00000031 0F05                         syscall
   385                                       
   386                                  ParentProcess:
   387                                       ; wait for child to terminate
   388 00000033 B900000000                   mov       rcx, 0
   389 00000038 BA00000000                   mov       rdx, 0
   390 0000003D BE00000000                   mov       rsi, 0
   391 00000042 BF00000000                   mov       rdi, 0                  ; wait for all childs
   392 00000047 B83D000000                   mov       rax, SYS_WAIT4          ; wait for child to terminate
   393 0000004C 0F05                         syscall
   394                                  Exit:
   395 0000004E 4831FF                       xor       rdi, rdi
   396 00000051 B83C000000                   mov       rax, SYS_EXIT
   397 00000056 0F05                         syscall
   398                                       
   399                                  Error.Fork:
   400 00000058 48BE-                        mov       rsi, forkerror
   401 0000005A [5B00000000000000] 
   402 00000062 BA0B000000                   mov       rdx, forkerror.length
   403 00000067 E831000000                   call      Write
   404 0000006C EBE0                         jmp       Exit
   405                                       
   406                                  Error.Execve:
   407 0000006E 48BE-                        mov       rsi, execveerror
   408 00000070 [6600000000000000] 
   409 00000078 BA31000000                   mov       rdx, execveerror.length
   410 0000007D E81B000000                   call      Write
   411 00000082 48BE-                        mov       rsi, filename
   412 00000084 [0000000000000000] 
   413 0000008C BA08000000                   mov       rdx, filename.length
   414 00000091 C64416FF0A                   mov       byte[rsi+rdx-1], 10     ; change trailing zero into EOL
   415 00000096 E802000000                   call      Write
   416 0000009B EBB1                         jmp       Exit
   417                                       
   418                                  Write:     
   419 0000009D BF01000000                   mov       rdi, STDOUT
   420 000000A2 B801000000                   mov       rax, SYS_WRITE
   421 000000A7 0F05                         syscall
   422 000000A9 C3                           ret
